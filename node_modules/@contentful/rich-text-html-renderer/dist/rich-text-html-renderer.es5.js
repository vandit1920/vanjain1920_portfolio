'use strict';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */

/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Module exports.
 * @public
 */

var escapeHtml_1 = escapeHtml;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34: // "
        escape = '&quot;';
        break;
      case 38: // &
        escape = '&amp;';
        break;
      case 39: // '
        escape = '&#39;';
        break;
      case 60: // <
        escape = '&lt;';
        break;
      case 62: // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index
    ? html + str.substring(lastIndex, index)
    : html;
}

var escape = /*@__PURE__*/getDefaultExportFromCjs(escapeHtml_1);

var dist = {};

var blocks = {};

Object.defineProperty(blocks, "__esModule", { value: true });
blocks.BLOCKS = void 0;
/**
 * Map of all Contentful block types. Blocks contain inline or block nodes.
 */
var BLOCKS;
(function (BLOCKS) {
    BLOCKS["DOCUMENT"] = "document";
    BLOCKS["PARAGRAPH"] = "paragraph";
    BLOCKS["HEADING_1"] = "heading-1";
    BLOCKS["HEADING_2"] = "heading-2";
    BLOCKS["HEADING_3"] = "heading-3";
    BLOCKS["HEADING_4"] = "heading-4";
    BLOCKS["HEADING_5"] = "heading-5";
    BLOCKS["HEADING_6"] = "heading-6";
    BLOCKS["OL_LIST"] = "ordered-list";
    BLOCKS["UL_LIST"] = "unordered-list";
    BLOCKS["LIST_ITEM"] = "list-item";
    BLOCKS["HR"] = "hr";
    BLOCKS["QUOTE"] = "blockquote";
    BLOCKS["EMBEDDED_ENTRY"] = "embedded-entry-block";
    BLOCKS["EMBEDDED_ASSET"] = "embedded-asset-block";
    BLOCKS["EMBEDDED_RESOURCE"] = "embedded-resource-block";
    BLOCKS["TABLE"] = "table";
    BLOCKS["TABLE_ROW"] = "table-row";
    BLOCKS["TABLE_CELL"] = "table-cell";
    BLOCKS["TABLE_HEADER_CELL"] = "table-header-cell";
})(BLOCKS || (blocks.BLOCKS = BLOCKS = {}));

var inlines = {};

Object.defineProperty(inlines, "__esModule", { value: true });
inlines.INLINES = void 0;
/**
 * Map of all Contentful inline types. Inline contain inline or text nodes.
 */
var INLINES;
(function (INLINES) {
    INLINES["HYPERLINK"] = "hyperlink";
    INLINES["ENTRY_HYPERLINK"] = "entry-hyperlink";
    INLINES["ASSET_HYPERLINK"] = "asset-hyperlink";
    INLINES["RESOURCE_HYPERLINK"] = "resource-hyperlink";
    INLINES["EMBEDDED_ENTRY"] = "embedded-entry-inline";
    INLINES["EMBEDDED_RESOURCE"] = "embedded-resource-inline";
})(INLINES || (inlines.INLINES = INLINES = {}));

var marks = {};

Object.defineProperty(marks, "__esModule", { value: true });
marks.MARKS = void 0;
/**
 * Map of all Contentful marks.
 */
var MARKS;
(function (MARKS) {
    MARKS["BOLD"] = "bold";
    MARKS["ITALIC"] = "italic";
    MARKS["UNDERLINE"] = "underline";
    MARKS["CODE"] = "code";
    MARKS["SUPERSCRIPT"] = "superscript";
    MARKS["SUBSCRIPT"] = "subscript";
    MARKS["STRIKETHROUGH"] = "strikethrough";
})(MARKS || (marks.MARKS = MARKS = {}));

var schemaConstraints = {};

(function (exports) {
	var __spreadArray = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	};
	var _a;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.V1_MARKS = exports.V1_NODE_TYPES = exports.TEXT_CONTAINERS = exports.HEADINGS = exports.CONTAINERS = exports.VOID_BLOCKS = exports.TABLE_BLOCKS = exports.LIST_ITEM_BLOCKS = exports.TOP_LEVEL_BLOCKS = void 0;
	var blocks_1 = blocks;
	var inlines_1 = inlines;
	var marks_1 = marks;
	/**
	 * Array of all top level block types.
	 * Only these block types can be the direct children of the document.
	 */
	exports.TOP_LEVEL_BLOCKS = [
	    blocks_1.BLOCKS.PARAGRAPH,
	    blocks_1.BLOCKS.HEADING_1,
	    blocks_1.BLOCKS.HEADING_2,
	    blocks_1.BLOCKS.HEADING_3,
	    blocks_1.BLOCKS.HEADING_4,
	    blocks_1.BLOCKS.HEADING_5,
	    blocks_1.BLOCKS.HEADING_6,
	    blocks_1.BLOCKS.OL_LIST,
	    blocks_1.BLOCKS.UL_LIST,
	    blocks_1.BLOCKS.HR,
	    blocks_1.BLOCKS.QUOTE,
	    blocks_1.BLOCKS.EMBEDDED_ENTRY,
	    blocks_1.BLOCKS.EMBEDDED_ASSET,
	    blocks_1.BLOCKS.EMBEDDED_RESOURCE,
	    blocks_1.BLOCKS.TABLE,
	];
	/**
	 * Array of all allowed block types inside list items
	 */
	exports.LIST_ITEM_BLOCKS = [
	    blocks_1.BLOCKS.PARAGRAPH,
	    blocks_1.BLOCKS.HEADING_1,
	    blocks_1.BLOCKS.HEADING_2,
	    blocks_1.BLOCKS.HEADING_3,
	    blocks_1.BLOCKS.HEADING_4,
	    blocks_1.BLOCKS.HEADING_5,
	    blocks_1.BLOCKS.HEADING_6,
	    blocks_1.BLOCKS.OL_LIST,
	    blocks_1.BLOCKS.UL_LIST,
	    blocks_1.BLOCKS.HR,
	    blocks_1.BLOCKS.QUOTE,
	    blocks_1.BLOCKS.EMBEDDED_ENTRY,
	    blocks_1.BLOCKS.EMBEDDED_ASSET,
	    blocks_1.BLOCKS.EMBEDDED_RESOURCE,
	];
	exports.TABLE_BLOCKS = [
	    blocks_1.BLOCKS.TABLE,
	    blocks_1.BLOCKS.TABLE_ROW,
	    blocks_1.BLOCKS.TABLE_CELL,
	    blocks_1.BLOCKS.TABLE_HEADER_CELL,
	];
	/**
	 * Array of all void block types
	 */
	exports.VOID_BLOCKS = [
	    blocks_1.BLOCKS.HR,
	    blocks_1.BLOCKS.EMBEDDED_ENTRY,
	    blocks_1.BLOCKS.EMBEDDED_ASSET,
	    blocks_1.BLOCKS.EMBEDDED_RESOURCE,
	];
	/**
	 * Dictionary of all container block types, and the set block types they accept as children.
	 *
	 * Note: This does not include `[BLOCKS.DOCUMENT]: TOP_LEVEL_BLOCKS`
	 */
	exports.CONTAINERS = (_a = {},
	    _a[blocks_1.BLOCKS.OL_LIST] = [blocks_1.BLOCKS.LIST_ITEM],
	    _a[blocks_1.BLOCKS.UL_LIST] = [blocks_1.BLOCKS.LIST_ITEM],
	    _a[blocks_1.BLOCKS.LIST_ITEM] = exports.LIST_ITEM_BLOCKS,
	    _a[blocks_1.BLOCKS.QUOTE] = [blocks_1.BLOCKS.PARAGRAPH],
	    _a[blocks_1.BLOCKS.TABLE] = [blocks_1.BLOCKS.TABLE_ROW],
	    _a[blocks_1.BLOCKS.TABLE_ROW] = [blocks_1.BLOCKS.TABLE_CELL, blocks_1.BLOCKS.TABLE_HEADER_CELL],
	    _a[blocks_1.BLOCKS.TABLE_CELL] = [blocks_1.BLOCKS.PARAGRAPH],
	    _a[blocks_1.BLOCKS.TABLE_HEADER_CELL] = [blocks_1.BLOCKS.PARAGRAPH],
	    _a);
	/**
	 * Array of all heading levels
	 */
	exports.HEADINGS = [
	    blocks_1.BLOCKS.HEADING_1,
	    blocks_1.BLOCKS.HEADING_2,
	    blocks_1.BLOCKS.HEADING_3,
	    blocks_1.BLOCKS.HEADING_4,
	    blocks_1.BLOCKS.HEADING_5,
	    blocks_1.BLOCKS.HEADING_6,
	];
	/**
	 * Array of all block types that may contain text and inline nodes.
	 */
	exports.TEXT_CONTAINERS = __spreadArray([blocks_1.BLOCKS.PARAGRAPH], exports.HEADINGS, true);
	/**
	 * Node types before `tables` release.
	 */
	exports.V1_NODE_TYPES = [
	    blocks_1.BLOCKS.DOCUMENT,
	    blocks_1.BLOCKS.PARAGRAPH,
	    blocks_1.BLOCKS.HEADING_1,
	    blocks_1.BLOCKS.HEADING_2,
	    blocks_1.BLOCKS.HEADING_3,
	    blocks_1.BLOCKS.HEADING_4,
	    blocks_1.BLOCKS.HEADING_5,
	    blocks_1.BLOCKS.HEADING_6,
	    blocks_1.BLOCKS.OL_LIST,
	    blocks_1.BLOCKS.UL_LIST,
	    blocks_1.BLOCKS.LIST_ITEM,
	    blocks_1.BLOCKS.HR,
	    blocks_1.BLOCKS.QUOTE,
	    blocks_1.BLOCKS.EMBEDDED_ENTRY,
	    blocks_1.BLOCKS.EMBEDDED_ASSET,
	    inlines_1.INLINES.HYPERLINK,
	    inlines_1.INLINES.ENTRY_HYPERLINK,
	    inlines_1.INLINES.ASSET_HYPERLINK,
	    inlines_1.INLINES.EMBEDDED_ENTRY,
	    'text',
	];
	/**
	 * Marks before `superscript` & `subscript` release.
	 */
	exports.V1_MARKS = [marks_1.MARKS.BOLD, marks_1.MARKS.CODE, marks_1.MARKS.ITALIC, marks_1.MARKS.UNDERLINE];
	
} (schemaConstraints));

var types = {};

Object.defineProperty(types, "__esModule", { value: true });

var nodeTypes = {};

Object.defineProperty(nodeTypes, "__esModule", { value: true });

var emptyDocument = {};

Object.defineProperty(emptyDocument, "__esModule", { value: true });
emptyDocument.EMPTY_DOCUMENT = void 0;
var blocks_1$1 = blocks;
/**
 * A rich text document considered to be empty.
 * Any other document structure than this is not considered empty.
 */
emptyDocument.EMPTY_DOCUMENT = {
    nodeType: blocks_1$1.BLOCKS.DOCUMENT,
    data: {},
    content: [
        {
            nodeType: blocks_1$1.BLOCKS.PARAGRAPH,
            data: {},
            content: [
                {
                    nodeType: 'text',
                    value: '',
                    marks: [],
                    data: {},
                },
            ],
        },
    ],
};

var helpers = {};

Object.defineProperty(helpers, "__esModule", { value: true });
helpers.isText = helpers.isBlock = helpers.isInline = void 0;
var blocks_1 = blocks;
var inlines_1 = inlines;
/**
 * Tiny replacement for Object.values(object).includes(key) to
 * avoid including CoreJS polyfills
 */
function hasValue(obj, value) {
    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
        var key = _a[_i];
        if (value === obj[key]) {
            return true;
        }
    }
    return false;
}
/**
 * Checks if the node is an instance of Inline.
 */
function isInline(node) {
    return hasValue(inlines_1.INLINES, node.nodeType);
}
helpers.isInline = isInline;
/**
 * Checks if the node is an instance of Block.
 */
function isBlock(node) {
    return hasValue(blocks_1.BLOCKS, node.nodeType);
}
helpers.isBlock = isBlock;
/**
 * Checks if the node is an instance of Text.
 */
function isText(node) {
    return node.nodeType === 'text';
}
helpers.isText = isText;

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.helpers = exports.EMPTY_DOCUMENT = exports.MARKS = exports.INLINES = exports.BLOCKS = void 0;
	var blocks_1 = blocks;
	Object.defineProperty(exports, "BLOCKS", { enumerable: true, get: function () { return blocks_1.BLOCKS; } });
	var inlines_1 = inlines;
	Object.defineProperty(exports, "INLINES", { enumerable: true, get: function () { return inlines_1.INLINES; } });
	var marks_1 = marks;
	Object.defineProperty(exports, "MARKS", { enumerable: true, get: function () { return marks_1.MARKS; } });
	__exportStar(schemaConstraints, exports);
	__exportStar(types, exports);
	__exportStar(nodeTypes, exports);
	var emptyDocument_1 = emptyDocument;
	Object.defineProperty(exports, "EMPTY_DOCUMENT", { enumerable: true, get: function () { return emptyDocument_1.EMPTY_DOCUMENT; } });
	var helpers$1 = __importStar(helpers);
	exports.helpers = helpers$1;
	
} (dist));

var _a, _b;
var attributeValue = function (value) { return "\"".concat(value.replace(/"/g, '&quot;'), "\""); };
var defaultNodeRenderers = (_a = {},
    _a[dist.BLOCKS.PARAGRAPH] = function (node, next) { return "<p>".concat(next(node.content), "</p>"); },
    _a[dist.BLOCKS.HEADING_1] = function (node, next) { return "<h1>".concat(next(node.content), "</h1>"); },
    _a[dist.BLOCKS.HEADING_2] = function (node, next) { return "<h2>".concat(next(node.content), "</h2>"); },
    _a[dist.BLOCKS.HEADING_3] = function (node, next) { return "<h3>".concat(next(node.content), "</h3>"); },
    _a[dist.BLOCKS.HEADING_4] = function (node, next) { return "<h4>".concat(next(node.content), "</h4>"); },
    _a[dist.BLOCKS.HEADING_5] = function (node, next) { return "<h5>".concat(next(node.content), "</h5>"); },
    _a[dist.BLOCKS.HEADING_6] = function (node, next) { return "<h6>".concat(next(node.content), "</h6>"); },
    _a[dist.BLOCKS.EMBEDDED_ENTRY] = function (node, next) { return "<div>".concat(next(node.content), "</div>"); },
    _a[dist.BLOCKS.EMBEDDED_RESOURCE] = function (node, next) { return "<div>".concat(next(node.content), "</div>"); },
    _a[dist.BLOCKS.UL_LIST] = function (node, next) { return "<ul>".concat(next(node.content), "</ul>"); },
    _a[dist.BLOCKS.OL_LIST] = function (node, next) { return "<ol>".concat(next(node.content), "</ol>"); },
    _a[dist.BLOCKS.LIST_ITEM] = function (node, next) { return "<li>".concat(next(node.content), "</li>"); },
    _a[dist.BLOCKS.QUOTE] = function (node, next) { return "<blockquote>".concat(next(node.content), "</blockquote>"); },
    _a[dist.BLOCKS.HR] = function () { return '<hr/>'; },
    _a[dist.BLOCKS.TABLE] = function (node, next) { return "<table>".concat(next(node.content), "</table>"); },
    _a[dist.BLOCKS.TABLE_ROW] = function (node, next) { return "<tr>".concat(next(node.content), "</tr>"); },
    _a[dist.BLOCKS.TABLE_HEADER_CELL] = function (node, next) { return "<th>".concat(next(node.content), "</th>"); },
    _a[dist.BLOCKS.TABLE_CELL] = function (node, next) { return "<td>".concat(next(node.content), "</td>"); },
    _a[dist.INLINES.ASSET_HYPERLINK] = function (node) { return defaultInline(dist.INLINES.ASSET_HYPERLINK, node); },
    _a[dist.INLINES.ENTRY_HYPERLINK] = function (node) { return defaultInline(dist.INLINES.ENTRY_HYPERLINK, node); },
    _a[dist.INLINES.RESOURCE_HYPERLINK] = function (node) {
        return defaultInlineResource(dist.INLINES.RESOURCE_HYPERLINK, node);
    },
    _a[dist.INLINES.EMBEDDED_ENTRY] = function (node) { return defaultInline(dist.INLINES.EMBEDDED_ENTRY, node); },
    _a[dist.INLINES.EMBEDDED_RESOURCE] = function (node) {
        return defaultInlineResource(dist.INLINES.EMBEDDED_RESOURCE, node);
    },
    _a[dist.INLINES.HYPERLINK] = function (node, next) {
        var href = typeof node.data.uri === 'string' ? node.data.uri : '';
        return "<a href=".concat(attributeValue(href), ">").concat(next(node.content), "</a>");
    },
    _a);
var defaultMarkRenderers = (_b = {},
    _b[dist.MARKS.BOLD] = function (text) { return "<b>".concat(text, "</b>"); },
    _b[dist.MARKS.ITALIC] = function (text) { return "<i>".concat(text, "</i>"); },
    _b[dist.MARKS.UNDERLINE] = function (text) { return "<u>".concat(text, "</u>"); },
    _b[dist.MARKS.CODE] = function (text) { return "<code>".concat(text, "</code>"); },
    _b[dist.MARKS.SUPERSCRIPT] = function (text) { return "<sup>".concat(text, "</sup>"); },
    _b[dist.MARKS.SUBSCRIPT] = function (text) { return "<sub>".concat(text, "</sub>"); },
    _b[dist.MARKS.STRIKETHROUGH] = function (text) { return "<s>".concat(text, "</s>"); },
    _b);
var defaultInline = function (type, node) {
    return "<span>type: ".concat(escape(type), " id: ").concat(escape(node.data.target.sys.id), "</span>");
};
var defaultInlineResource = function (type, node) {
    return "<span>type: ".concat(escape(type), " urn: ").concat(escape(node.data.target.sys.urn), "</span>");
};
/**
 * Serialize a Contentful Rich Text `document` to an html string.
 */
function documentToHtmlString(richTextDocument, options) {
    if (options === void 0) { options = {}; }
    if (!richTextDocument || !richTextDocument.content) {
        return '';
    }
    return nodeListToHtmlString(richTextDocument.content, {
        renderNode: __assign(__assign({}, defaultNodeRenderers), options.renderNode),
        renderMark: __assign(__assign({}, defaultMarkRenderers), options.renderMark),
        preserveWhitespace: options.preserveWhitespace,
    });
}
function nodeListToHtmlString(nodes, _a) {
    var renderNode = _a.renderNode, renderMark = _a.renderMark, preserveWhitespace = _a.preserveWhitespace;
    return nodes
        .map(function (node) { return nodeToHtmlString(node, { renderNode: renderNode, renderMark: renderMark, preserveWhitespace: preserveWhitespace }); })
        .join('');
}
function nodeToHtmlString(node, _a) {
    var renderNode = _a.renderNode, renderMark = _a.renderMark, preserveWhitespace = _a.preserveWhitespace;
    if (dist.helpers.isText(node)) {
        var nodeValue = escape(node.value);
        // If preserveWhitespace is true, handle line breaks and spaces.
        if (preserveWhitespace) {
            nodeValue = nodeValue
                .replace(/\n/g, '<br/>')
                .replace(/ {2,}/g, function (match) { return '&nbsp;'.repeat(match.length); });
        }
        if (node.marks.length > 0) {
            return node.marks.reduce(function (value, mark) {
                if (!renderMark[mark.type]) {
                    return value;
                }
                return renderMark[mark.type](value);
            }, nodeValue);
        }
        return nodeValue;
    }
    else {
        var nextNode = function (nodes) {
            return nodeListToHtmlString(nodes, { renderMark: renderMark, renderNode: renderNode, preserveWhitespace: preserveWhitespace });
        };
        if (!node.nodeType || !renderNode[node.nodeType]) {
            // TODO: Figure what to return when passed an unrecognized node.
            return '';
        }
        return renderNode[node.nodeType](node, nextNode);
    }
}

exports.documentToHtmlString = documentToHtmlString;
//# sourceMappingURL=rich-text-html-renderer.es5.js.map
